---
title: "Tracking the Intangible: Quantifying Effort in NFL Running Backs"
author:
- "Emily Shteynberg"
- "Luke Snavely"
- "Sheryl Solorzano"
date: "July 25, 2025"
format:
  html:
    html-math-method: katex
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
bibliography: bib/library.bib
---

```{r}
#| label: setup
#| include: false

# Load necessary packages
library(tidyverse)
library(knitr)
library(ggplot2)
library(plotly)
library(tidytext)
library(quantreg)
library(qgam)
library(knitr)
library(kableExtra)

```

```{r}
#| fig-width: 8
#| fig-height: 4
#| out.width: "85%"
#| fig-align: "center"


include_graphics("docs/images/NFL2022.png")

```

*Image source: [The Tower](https://sbadamsthetower.com/7756/sports/2022-2023-nfl-preview/)*




---

## Introduction 

American Football is one of the most-watched and popular sports in the U.S., known for its quick decision-making, complex tactics, and athletically demanding displays of strength, endurance and speed. However, many traditional statistics miss the “how” behind value plays such as yards gained after contact, expected points added, etc. As such, we must ask ourselves: what does it take to gain a yard? Is a player exceeding their capabilities, therefore, making an effort? If so, how often or how close does a player comes to his “best"?

Our motivation for this project centered on these very questions. Our goal is to develop a metric to measure effort. We acknowledge that effort is a complex, intangible, and most often subjective concept, influenced by player position, opposing defense, snap count or play volume to play call/assignment. Effort is also heavily contextual and multi-faceted, often shaped by the emotional and mental state as well as the thinking process of a player. Given the available data, we are going to focus on one facet: the raw physical capabilities of a player — specifically, acceleration and speed.

By quantifying effort, we hope to provide not only to teams and sport data analysts, but also fans with deeper insight into what and how football players are truly contributing on the field — even when it's not reflected in conventional stats or even the outcome of a game. We also aspire to address or even fill in some of the gaps in the current literature around quantifying effort in American football since most research focus on win probabilities and other outcomes at the game level rather than individualized capabilities.


## Data

The data used for this project were the Game, play, player, tracking datasets from from NFL Big Data Bowl 2022 Dataset, Weeks 1-9 [@nfl2022] on Kaggle.

 - We limited our dataset to NFL running backs with more than 20 rushes per play during the 2022 season.
 - We limited the rows to running plays where a running back (RB) is the ball carrier.
 - We Trimmed each play to frames between handoff and at end of a play.
 
### Explanatory Data Analysis
 

## Methods

- **[Describe the modeling techniques you chose, their assumptions, justifications for why they are appropriate for the problem, and how you're comparing/evaluating the different methods]**

- Used Dr. Ron Yurko and Quang Nguyen's code to calculate distance from the nearest defender [@qntkhvnAngle]

- Based our AS/ AKE curved on the article titled "Individual acceleration-speed profile in-situ: A proof of concept in professional football players"[@AS]

- Still using the non-linear quantile regression plot? [@quantReg]


## Results

Describe your results. This can include tables and plots showing your results, as well as text describing how your models worked and the appropriate interpretations of the relevant output. (Note: Don’t just write out the textbook interpretations of all model coefficients. Instead, interpret the output that is relevant for your question of interest that is framed in the introduction)

**[Metrics so far]**

::: {.callout-note title="Effort v1" style="font-size: 1.5em;"}
$$
\left(\sum\limits_{i=1}^{n_{\text{below}}} {\frac{1}{1+d_i}}\right)\bigg/n_{\text{below}}
$$
➜️ Quantifies *how close* a player comes to his "best" (99th percentile) accelerations

➜ Saquon Barkley: 0.152 

➜ Rex Burkhead: 0.149
:::

::: {.callout-note title="Effort v2" style="font-size: 1.5em;"} 
Percentage of total points that lie in between the percentile $P_{99}$ and $P_{99}-3$

➜ Quantifies *how often* a player comes close to his "best" (99th percentile) accelerations

➜ Saquon Barkley: 0.074 

➜ Rex Burkhead: 0.069
:::


```{r}
#| label: non-linear-quant-regression
#| fig-cap: "Non-linear quantile regression for acceleration vs speed"

load("web_data/tracking_bc.Rdata")
load("web_data/player_runs_modeling.Rdata")


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}

```



### Interactive plot with menu for the 99th percentile

```{r}
#| label: percentile-lines-regression
#| fig-cap: "Percentage of total points that lie in between the percentile $P_{99}$ and $P_{99}-3$"

# NOTE: takes a bit to run since the function is iterating through a lot of players! >:(

#================ [Interactive drop down menu to select any running backs (syntax)]================#

eff_function_qgam <- function(name, graph = FALSE) {
  # Filter player runs
  player_runs <- tracking_bc |> 
    filter(displayName == name)
  
  # Define folds
  N_FOLDS <- 5
  
  # Assign folds by game
  plays_folds <- player_runs |> 
    distinct(gameId) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  # Merge with folds and select modeling variables
  player_runs_modeling <- player_runs |> 
    select(s_mph, a_mpsh, gameId) |> 
    left_join(plays_folds, by = "gameId") |> 
    select(-gameId)

  # Cross-validation logic
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> filter(fold == x)
    train_data <- player_runs_modeling |> filter(fold != x)
    
# trying to suppress messages from qgam() model in the final rendered file
    
    suppressMessages({
  suppressWarnings({
    capture.output({
      qgam_fit <- qgam(
        a_mpsh ~ s(s_mph, k = 15, bs = "ad"),
        data = train_data,
        qu = .99,
        multicore = TRUE,
        ncores = 7
      )
    })
  })
})

    tibble(
      displayName = name,
      qgam_pred = predict(qgam_fit, newdata = test_data),
      actual_acc = test_data$a_mpsh,
      actual_speed = test_data$s_mph,
      res = test_data$a_mpsh - predict(qgam_fit, newdata = test_data),
      qgam_pred_minus_3 = predict(qgam_fit, newdata = test_data) - 3,
      test_fold = x
    )
  }

  # Run CV and collect predictions
  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    bind_rows()

  # Compute effort score (proportion below the 99th percentile line)
  eff_score <- mean(player_runs_test_preds$res < 0)

  if (graph == TRUE) {
    # Fit final GAM lines for plotting
    gam_fit_99 <- mgcv::gam(qgam_pred ~ s(actual_speed, k = 15, bs = "ad"), data = player_runs_test_preds)
gam_fit_99m3 <- mgcv::gam(qgam_pred_minus_3 ~ s(actual_speed, k = 15, bs = "ad"), data = player_runs_test_preds)

    s_seq <- seq(min(player_runs_test_preds$actual_speed, na.rm = TRUE),
                 max(player_runs_test_preds$actual_speed, na.rm = TRUE),
                 length.out = 200)
    pred_df <- tibble(
      s = s_seq,
      pred_99 = predict(gam_fit_99, newdata = tibble(actual_speed = s_seq)),
      pred_99m3 = predict(gam_fit_99m3, newdata = tibble(actual_speed = s_seq))
    )

    # ggplot
    p <- ggplot() +
      geom_point(data = player_runs_test_preds, aes(
        x = actual_speed, 
        y = actual_acc,
        text = paste0("Speed: ", round(actual_speed, 2),
                      "<br>Acceleration: ", round(actual_acc, 2))), 
      alpha = 0.55, 
      color = "grey40",
      # so the data point's color doesn't show on the legend
      show.legend = FALSE) + 
      geom_line(data = pred_df, aes(x = s, y = pred_99, color = "99th percentile"), size = 1.2) +
      geom_line(data = pred_df, aes(x = s, y = pred_99m3, color = "99th percentile - 3"), linetype = "dashed", size = 1.2) +
      scale_color_manual("Line", values = c("99th percentile" = "#0072B2", "99th percentile - 3" = "black")) +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (99%)"),
        x = "Speed (mph)",
        y = "Acceleration (m/s²)",
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal(base_size = 16) +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        legend.title = element_text(face = "bold"),
        legend.text = element_text(size = 13),
        plot.caption = element_text(face = "italic", size = 10)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_99 = 1 - eff_score))
}


```


# Metrics


## Effort metric v2
::: {.panel-tabset}

### Tab 1: Top Running backs
```{r}
#| label: fig-quant-6
#| fig-cap: "Top 10"
#| message: false
#| warning: false

# Player list
rb_dd_list <- c("Chase Edmonds", "Rachaad White", "D'Andre Swift", 
                "Samaje Perine", "Joshua Kelley", "Matt Breida", "Alexander Mattison",
                "Josh Jacobs", "James Cook", "Melvin Gordon")

# Initialize plot
fig2 <- plot_ly()
all_traces <- list()
visibility_masks <- list()
trace_lengths <- c()

#Loop through each running back to collect their traces
for (i in seq_along(rb_dd_list)) {
  player <- rb_dd_list[i]
  plot_obj <- ggplotly(eff_function_qgam(player, graph = TRUE))
  
  player_traces <- list()
  for (trace in plot_obj$x$data) {
    trace$visible <- (i == 1) 
    
    # this is to display the first running back's AS quantile regression 
    fig2 <- fig2 |> add_trace(
      x = trace$x,
      y = trace$y,
      type = trace$type,
      mode = trace$mode,
      line = trace$line,
      name = trace$name,
      text = trace$text,
      hoverinfo = trace$hoverinfo,
      visible = trace$visible
    )
    player_traces <- append(player_traces, list(trace))
  }
  
  all_traces[[i]] <- player_traces
  trace_lengths[i] <- length(player_traces)
}

#  Visibility masks for dropdown
total_traces <- sum(trace_lengths)

for (i in seq_along(rb_dd_list)) {
  mask <- rep(FALSE, total_traces)
  start_index <- sum(trace_lengths[1:(i - 1)]) + 1
  end_index <- sum(trace_lengths[1:i])
  mask[start_index:end_index] <- TRUE
  visibility_masks[[i]] <- mask
}

# Adding dropdown menu
dropdown_buttons <- lapply(seq_along(rb_dd_list), function(i) {
  list(method = "restyle",
       args = list("visible", visibility_masks[[i]]),
       label = rb_dd_list[i])
})

fig2 <- fig2 |>
  layout(
    title = "Acceleration vs Speed Individualized Profile by Running Back",
    updatemenus = list(
      list(
        type = "dropdown",
        y = 0.8,
        x = 1.1,
        buttons = dropdown_buttons
      )
    )
  )
fig2


```


## Discussion

Give your conclusions and summarize what you have learned with regards to your question of interest. Are there any limitations with the approaches you used? What do you think are the next steps to follow-up your project?

## Appendix

### Tab 2: Bottom running backs
```{r}
# #| label: fig-quant-7 -->
# #| fig-cap: "Bottom 10" -->
# #| message: false -->
# #| warning: false -->


# running backs at the bottom 
# rb_list <- c("Brian Robinson",
#                 "Kareem Hunt", "Gus Edwards", "Breece Hall", "David Montgomery",
#                 "Tyler Allgeier", "Isiah Pacheco", "Christian McCaffrey",
#                 "Darrell Henderson", "Deon Jackson")
# 
# fig3 <- plot_ly()
# all_traces <- list()
# visibility_masks <- list()
# trace_lengths <- c()
# 
# # Loop through each player to collect their traces
# for (i in seq_along(rb_list)) {
#   player2 <- rb_list[i]
#   plot_obj2 <- ggplotly(eff_function_qgam(player2, graph = TRUE))
#   
#   player_traces <- list()
#   for (trace in plot_obj2$x$data) {
#     trace$visible <- (i == 1) 
#     fig3 <- fig3 |> add_trace(
#       x = trace$x,
#       y = trace$y,
#       type = trace$type,
#       mode = trace$mode,
#       line = trace$line,
#       name = trace$name,
#       text = trace$text,
#       hoverinfo = trace$hoverinfo,
#       visible = trace$visible
#     )
#     player_traces <- append(player_traces, list(trace))
#   }
#   
#   all_traces[[i]] <- player_traces
#   trace_lengths[i] <- length(player_traces)
# }
# 
# total_traces <- sum(trace_lengths)
# 
# for (i in seq_along(rb_list)) {
#   mask <- rep(FALSE, total_traces)
#   start_index <- sum(trace_lengths[1:(i - 1)]) + 1
#   end_index <- sum(trace_lengths[1:i])
#   mask[start_index:end_index] <- TRUE
#   visibility_masks[[i]] <- mask
# }
# 
# 
# dropdown_buttons <- lapply(seq_along(rb_list), function(i) {
#   list(method = "restyle",
#        args = list("visible", visibility_masks[[i]]),
#        label = rb_list[i])
# })
# 
# fig3 <- fig3 %>%
#   layout(
#     title = "Acceleration vs Speed Individualized Profile by Running Back",
#     updatemenus = list(
#       list(
#         type = "dropdown",
#         y = 0.8,
#         x = 1.1,
#         buttons = dropdown_buttons
#       )
#     )
#   )
# fig3

```

:::


## Tables

::: {.panel-tabset}

### Tab 1: Saquon Barkley
```{r}
#| label: fig-quant-8
#| fig-cap: "Top 10 running backs by exact distance score"
#| echo: false


load("web_data/bottom_dis_scores.Rdata")
load("web_data/top_dis_scores.Rdata")

top_dis_scores |> 
  select(1:2) |> 
  kable(booktabs = TRUE,
    digits = 2,
    col.names = c("Running Back", "Distance Score")
  ) |> 
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "center"
  ) |>
  row_spec(0, bold = TRUE, color = "white", background = "#000080") |>
  column_spec(2, color = "black", background = "#ffffff") |>
  add_header_above(c("Top 10 Running backs with Highest distance score" = 2),
                   background = "#CD2626", color = "white", bold = TRUE)


```

### Tab 2: Bottom Running Backs with lowest distance score 
```{r}
#| label: fig-quant-9
#| fig-cap: "Bottom 10 running backs by exact distance score"
#| echo: false


load("web_data/bottom_dis_scores.Rdata")

bottom_dis_scores |> 
  select(1:2) |> 
  kable(booktabs = TRUE,
    digits = 2,
    col.names = c("Running Back", "Distance Score")
  ) |> 
  kable_styling(
    bootstrap_options = c("striped", "hover", "condensed", "responsive"),
    full_width = FALSE,
    position = "center"
  ) |>
  row_spec(0, bold = TRUE, color = "white", background = "#000080") |>
  column_spec(2, color = "black", background = "#ffffff") |>
  add_header_above(c("Bottom 10 Running backs with lowest distance score" = 2),
                   background = "#CD2626", color = "white", bold = TRUE)


```
:::



- Percentage of total points that lie in between the percentile $P_{99}$ and $P_{99}-3$
- This effort metric quantifies how often a player comes close to his “best” (99th percentile) accelerations







## Trying a different interactive layout
::: {.panel-tabset}

### Tab 1: Saquon Barkley
```{r}
#| label: fig-quant-1
#| fig-cap: "trying non-linear-quant-regression"

load("web_data/tracking_bc.Rdata")
load("web_data/player_runs_modeling.Rdata")


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}


 (eff_function_rqss("Saquon Barkley", graph = TRUE))

```


### Tab 2: Rex Burkhead
```{r}
##| label: fig-quant-2
##| fig-cap: "trying out non-linear-quant-regression"

# 
# 
# set.seed(1)
# 
# eff_function_rqss <- function(name, graph = FALSE) {
#   player_runs <- tracking_bc |> 
#     filter(displayName == name)
# 
#   N_FOLDS <- 5
#   player_runs_modeling <- player_runs |> 
#     select(s, a) |> 
#     mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
#   
#   player_runs_cv <- function(x) {
#     test_data <- player_runs_modeling |> 
#       filter(fold == x)
#     train_data <- player_runs_modeling |> 
#       filter(fold != x)
#     
#     s_range <- range(train_data$s)
#     test_data <- test_data |> 
#       filter(s >= max(s_range[1], 1),
#              s <= min(s_range[2], 9))
#     
#     rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
#     
#     out <- tibble(
#       rq_pred = predict(rq_fit, newdata = test_data),
#       test_actual = test_data$a,
#       res_rq = test_actual - rq_pred,
#       test_fold = x
#     )
#     return(out)
#   }
# 
#   player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
#     list_rbind()
#   
#   eff_score <- mean(player_runs_test_preds$res_rq < 0)
# 
#   if (graph == TRUE) {
#     # Fit final model and compute smooth prediction line
#     rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
#     s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
#     pred_df <- tibble(s = s_seq)
#     pred_df$a <- predict(rq_fit, newdata = pred_df)
# 
#     # Interactive ggplot
#     p <- ggplot() +
#       geom_point(data = player_runs, aes(
#       x = s, 
#       y = a,
#       text = paste0("Speed: ", round(s, 2),
#                     "<br>Acceleration: ", round(a, 2))), 
#       alpha = 0.5, 
#       color = "grey40") +
#       geom_line(data = pred_df, aes(x = s, y = a), 
#                 color = "blue", size = 1.2) +
#       scale_x_continuous(name = "Speed") +
#       scale_y_continuous(name = "Acceleration") +
#       labs(
#         title = paste0(name, "'s Effort Quantile Curve (90%)"),
#         caption = "Data from Weeks 1–9 of the 2022 NFL Season"
#       ) +
#       theme_minimal() +
#       theme(
#         plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
#         axis.title = element_text(face = "bold", size = 14),
#         axis.text = element_text(size = 12),
#         plot.caption = element_text(face = "italic", size = 9)
#       )
# 
#     return(ggplotly(p, tooltip = "text"))
#   }
# 
#   return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
# }
# 
# 
#  (eff_function_rqss("Rex Burkhead", graph = TRUE))

```


### Tab 3: Melvin Gordon
```{r}
##| label: fig-quant-3
##| fig-cap: "trying out non-linear-quant-regression"


# set.seed(1)
# 
# eff_function_rqss <- function(name, graph = FALSE) {
#   player_runs <- tracking_bc |> 
#     filter(displayName == name)
# 
#   N_FOLDS <- 5
#   player_runs_modeling <- player_runs |> 
#     select(s, a) |> 
#     mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
#   
#   player_runs_cv <- function(x) {
#     test_data <- player_runs_modeling |> 
#       filter(fold == x)
#     train_data <- player_runs_modeling |> 
#       filter(fold != x)
#     
#     s_range <- range(train_data$s)
#     test_data <- test_data |> 
#       filter(s >= max(s_range[1], 1),
#              s <= min(s_range[2], 9))
#     
#     rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
#     
#     out <- tibble(
#       rq_pred = predict(rq_fit, newdata = test_data),
#       test_actual = test_data$a,
#       res_rq = test_actual - rq_pred,
#       test_fold = x
#     )
#     return(out)
#   }
# 
#   player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
#     list_rbind()
#   
#   eff_score <- mean(player_runs_test_preds$res_rq < 0)
# 
#   if (graph == TRUE) {
#     # Fit final model and compute smooth prediction line
#     rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
#     s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
#     pred_df <- tibble(s = s_seq)
#     pred_df$a <- predict(rq_fit, newdata = pred_df)
# 
#     # Interactive ggplot
#     p <- ggplot() +
#       geom_point(data = player_runs, aes(
#       x = s, 
#       y = a,
#       text = paste0("Speed: ", round(s, 2),
#                     "<br>Acceleration: ", round(a, 2))), 
#       alpha = 0.5, 
#       color = "grey40") +
#       geom_line(data = pred_df, aes(x = s, y = a), 
#                 color = "blue", size = 1.2) +
#       scale_x_continuous(name = "Speed") +
#       scale_y_continuous(name = "Acceleration") +
#       labs(
#         title = paste0(name, "'s Effort Quantile Curve (90%)"),
#         caption = "Data from Weeks 1–9 of the 2022 NFL Season"
#       ) +
#       theme_minimal() +
#       theme(
#         plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
#         axis.title = element_text(face = "bold", size = 14),
#         axis.text = element_text(size = 12),
#         plot.caption = element_text(face = "italic", size = 9)
#       )
# 
#     return(ggplotly(p, tooltip = "text"))
#   }
# 
#   return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
# }
# 
# 
#  (eff_function_rqss("Melvin Gordon", graph = TRUE))


```

:::















