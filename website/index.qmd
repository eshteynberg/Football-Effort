---
title: "Tracking the Intangible: Quantifying Effort in NFL Running Backs"
author:
- "Emily Shteynberg"
- "Luke Snavely"
- "Sheryl Solorzano"
date: "July 25, 2025"
toc: true
format:
  html:
    theme: cosmo
    html-math-method: katex
    self-contained: true
execute:
  echo: false
  warning: false
  message: false
bibliography: bib/library.bib
---

```{r}
#| label: setup
#| include: false

# Load necessary packages
library(tidyverse)
library(knitr)
library(ggplot2)
library(plotly)
library(tidytext)
library(quantreg)

```

```{r}
#| fig-width: 8
#| fig-height: 4
#| out.width: "85%"
#| fig-align: "center"


include_graphics("docs/images/NFL2022.png")

```

*Image source: [The Tower](https://sbadamsthetower.com/7756/sports/2022-2023-nfl-preview/)*




---

## Introduction 

Describe the problem and why it is important.

American Football is one of the most-watched and popular sports in the U.S., known for its quick decision-making, complex tactics, and athletically demanding displays of strength, endurance and speed.  


## Data

- Describe the data you’re using in detail, where you accessed it, along with relevant exploratory data analysis (EDA). You should also include descriptions of any relevant data pre-processing steps (e.g., whether you consider specific observations, create any meaningful features, etc.---but don't mention minor steps like column type conversion, filtering out unnecessary rows)

- The data used for this project were from NFL Big Data Bowl 2022 Dataset [@nfl2022] on Kaggle.

 - We limited our dataset to NFL running backs with more than 20 rushes.

## Methods

- Describe the modeling techniques you chose, their assumptions, justifications for why they are appropriate for the problem, and how you're comparing/evaluating the different methods.

- Used Dr. Ron Yurko and Quang Nguyen's code to calculate distance from the nearest defender [@qntkhvnAngle]

- Based our AS/ AKE curved on the article titled "Individual acceleration-speed profile in-situ: A proof of concept in professional football players"[@AS]

- Still using the non-linear quantile regression plot? [@quantReg]


## Results

Describe your results. This can include tables and plots showing your results, as well as text describing how your models worked and the appropriate interpretations of the relevant output. (Note: Don’t just write out the textbook interpretations of all model coefficients. Instead, interpret the output that is relevant for your question of interest that is framed in the introduction)

## Discussion

Give your conclusions and summarize what you have learned with regards to your question of interest. Are there any limitations with the approaches you used? What do you think are the next steps to follow-up your project?

## Appendix

```{r}
#| label: non-linear-quant-regression
#| fig-cap: "Non-linear quantile regression for acceleration vs speed"

load("web_data/tracking_bc.Rdata")
load("web_data/player_runs_modeling.Rdata")


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}

#================ [Interactive drop down menu to select any running backs]================

g1 <- ggplotly(eff_function_rqss("Saquon Barkley", graph = TRUE))
g2 <- ggplotly(eff_function_rqss("Rex Burkhead", graph = TRUE))



# Step 2: Initialize plotly figure
fig <- plot_ly()

# Step 3: Add Saquon traces (visible)
for (trace in g1$x$data) {
  trace$visible <- TRUE
  fig <- fig %>% add_trace(
    x = trace$x,
    y = trace$y,
    type = trace$type,
    mode = trace$mode,
    line = trace$line,
    name = trace$name,
    text = trace$text,
    hoverinfo = trace$hoverinfo,
    visible = TRUE
  )
}

# Step 4: Add Rex traces (initially hidden)
for (trace in g2$x$data) {
  trace$visible <- FALSE
  fig <- fig %>% add_trace(
    x = trace$x,
    y = trace$y,
    type = trace$type,
    mode = trace$mode,
    line = trace$line,
    name = trace$name,
    text = trace$text,
    hoverinfo = trace$hoverinfo,
    visible = FALSE
  )
}

# Step 5: Construct correct visibility vectors
n1 <- length(g1$x$data)
n2 <- length(g2$x$data)

vis_saquon <- c(rep(TRUE, n1), rep(FALSE, n2))
vis_rex    <- c(rep(FALSE, n1), rep(TRUE, n2))

# Step 6: Add dropdown menu with correct visibility toggles
fig <- fig %>% layout(
  title = "Acceleration vs Speed Curve by Player",
  updatemenus = list(
    list(
      type = "dropdown",
      y = 0.8,
      x = 1.1,
      buttons = list(
        list(method = "restyle",
             args = list("visible", vis_saquon),
             label = "Saquon Barkley"),
        list(method = "restyle",
             args = list("visible", vis_rex),
             label = "Rex Burkhead")
      )
    )
  )
)

fig

```


## interactive plot with 99th percentile 

```{r}
#| label: percentile-regression
#| fig-cap: "Non-linear quantile regression for acceleration vs speed"

load("web_data/tracking_bc.Rdata")
load("web_data/player_runs_modeling.Rdata")
library(qgam)

set.seed(1)

eff_function_qgam <- function(name, graph = FALSE) {
  # Filter player runs
  player_runs <- tracking_bc |> 
    filter(displayName == name)
  
  # Define folds
  N_FOLDS <- 5
  
  # Assign folds by game
  plays_folds <- player_runs |> 
    distinct(gameId) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  # Merge with folds and select modeling variables
  player_runs_modeling <- player_runs |> 
    select(s_mph, a_mpsh, gameId) |> 
    left_join(plays_folds, by = "gameId") |> 
    select(-gameId)

  # Cross-validation logic
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> filter(fold == x)
    train_data <- player_runs_modeling |> filter(fold != x)

    qgam_fit <- qgam(a_mpsh ~ s(s_mph, k = 15, bs = "ad"),
                     data = train_data,
                     qu = .99,
                     multicore = TRUE,
                     ncores = 7)

    tibble(
      displayName = name,
      qgam_pred = predict(qgam_fit, newdata = test_data),
      actual_acc = test_data$a_mpsh,
      actual_speed = test_data$s_mph,
      res = test_data$a_mpsh - predict(qgam_fit, newdata = test_data),
      qgam_pred_minus_3 = predict(qgam_fit, newdata = test_data) - 3,
      test_fold = x
    )
  }

  # Run CV and collect predictions
  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    bind_rows()

  # Compute effort score (proportion below the 99th percentile line)
  eff_score <- mean(player_runs_test_preds$res < 0)

  # Graph logic
  if (graph == TRUE) {
    # Fit final GAM lines for plotting
    gam_fit_99 <- mgcv::gam(qgam_pred ~ s(actual_speed, k = 15, bs = "tp"), data = player_runs_test_preds)
gam_fit_99m3 <- mgcv::gam(qgam_pred_minus_3 ~ s(actual_speed, k = 15, bs = "tp"), data = player_runs_test_preds)

    s_seq <- seq(min(player_runs_test_preds$actual_speed, na.rm = TRUE),
                 max(player_runs_test_preds$actual_speed, na.rm = TRUE),
                 length.out = 200)
    pred_df <- tibble(
      s = s_seq,
      pred_99 = predict(gam_fit_99, newdata = tibble(actual_speed = s_seq)),
      pred_99m3 = predict(gam_fit_99m3, newdata = tibble(actual_speed = s_seq))
    )

    # ggplot
    p <- ggplot() +
      geom_point(data = player_runs_test_preds, aes(
        x = actual_speed, 
        y = actual_acc,
        text = paste0("Speed: ", round(actual_speed, 2),
                      "<br>Acceleration: ", round(actual_acc, 2))
      ), alpha = 0.5, color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = pred_99, color = "99th percentile"), size = 1.2) +
      geom_line(data = pred_df, aes(x = s, y = pred_99m3, color = "99th percentile - 3"), linetype = "dashed", size = 1.2) +
      scale_color_manual("Line", values = c("99th percentile" = "#0072B2", "99th percentile - 3" = "#D55E00")) +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (99%)"),
        x = "Speed (mph)",
        y = "Acceleration (m/s²)",
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal(base_size = 16) +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        legend.title = element_text(face = "bold"),
        legend.text = element_text(size = 13),
        plot.caption = element_text(face = "italic", size = 10)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  # If not graphing, return score
  return(tibble(displayName = name, effort_ratio_99 = 1 - eff_score))
}


# Test
eff_function_qgam("Saquon Barkley", graph = TRUE)

```

















# Trying a different interactive layout
::: {.panel-tabset}

### Tab 1: Saquon Barkley
```{r}
#| label: fig-quant-1
#| fig-cap: "trying non-linear-quant-regression"

load("web_data/tracking_bc.Rdata")
load("web_data/player_runs_modeling.Rdata")


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}


 (eff_function_rqss("Saquon Barkley", graph = TRUE))

```


### Tab 2: Rex Burkhead
```{r}
#| label: fig-quant-2
#| fig-cap: "trying out non-linear-quant-regression"



set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}


 (eff_function_rqss("Rex Burkhead", graph = TRUE))

```


### Tab 3: Melvin Gordon
```{r}
#| label: fig-quant-3
#| fig-cap: "trying out non-linear-quant-regression"


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}


 (eff_function_rqss("Melvin Gordon", graph = TRUE))


```

### Tab 4: Chase Edmonds
```{r}
#| label: fig-quant-4
#| fig-cap: "trying out non-linear-quant-regression"


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}


 (eff_function_rqss("Chase Edmonds", graph = TRUE))
```

### Tab 5: Boston Scott
```{r}
#| label: fig-quant-5
#| fig-cap: "trying out non-linear-quant-regression"


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1–9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}


 (eff_function_rqss("Boston Scott", graph = TRUE))
```

:::















