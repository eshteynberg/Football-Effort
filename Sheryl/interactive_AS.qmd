

```{r}
# Loading packages 
library(tidyverse)
library(plotly)
library(quantreg)
library(mgcv)
library(ranger)
library(qgam)

```




```{r}
# Function
## drop down menu so the user can select any NFL running back

rbs_dropdown <- c("Saquon Barkley", 
                  "Rex Burkhead",
                  "Jaylen Warren",
                  "Rashaad Penny")

# Function ----------------------------------------------------------------
eff_function_qgam <- function(name, graph = FALSE) {
  # Choosing player name
  player_runs <- tracking_bc |> 
    filter(displayName == name)
  
  # 5 folds
  N_FOLDS <- 5
  
  # Making sure plays are in the same fold
  plays_folds <- player_runs |> 
    distinct(playId) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  # Modeling data
  player_runs_modeling <- player_runs |> 
    select(s_mph, a_mpsh, playId) |> 
    left_join(plays_folds, by = "playId") |> 
    select(-playId)
  
  player_runs_cv <- function(x){
    test_data <- player_runs_modeling |> filter(fold == x)
    train_data <- player_runs_modeling |> filter(fold != x)
    
    # QGAM model
    qgam_fit <- qgam(a_mpsh ~ s(s_mph, k = 20), data = train_data, qu = 0.99)
    
    tibble(
      displayName = name,
      qgam_pred = predict(qgam_fit, newdata = test_data),
      actual_acc = test_data$a_mpsh,
      actual_speed = test_data$s_mph,
      res = abs(test_data$a_mpsh - predict(qgam_fit, newdata = test_data)),
      qgam_pred_minus_3 = predict(qgam_fit, newdata = test_data) - 3,
      test_fold = x
    )
  }
  
  # Cross-validated predictions
  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> bind_rows()
  
  if (graph == TRUE) {
    player_graph <- player_runs_test_preds |> 
      ggplot(aes(x = actual_speed, y = qgam_pred)) +
      geom_point(aes(y = actual_acc), alpha = 0.3, color = "grey2") +
      stat_smooth(method = "gam", formula = y ~ s(x),
                  method.args = list(se = FALSE), 
                  aes(color = "99th percentile line"), size = 1.2) + 
      stat_smooth(method = "gam", formula = y ~ s(x),
                  method.args = list(se = FALSE), 
                  aes(y = qgam_pred_minus_3, color = "Relaxed 99th percentile line"), size = 1.2) + 
      labs(x = "Adjusted Speed (mph)",
           y = "Acceleration (m/s²)",
           title = paste0(name, "'s Effort Profile"),
           caption = "Data from Weeks 1-9 of the 2022 NFL Season") +
      scale_color_manual(values = c("99th percentile line" = "red", "Relaxed 99th percentile line" = "blue")) +
      theme_minimal() +
      theme(plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
            legend.title = element_blank(),
            legend.text = element_text(size = 12),
            axis.title = element_text(face = "bold", size = 14),
            axis.text = element_text(size = 12),
            plot.caption = element_text(face = "italic", size = 9))
    
    return(player_graph)
  }
  return(player_runs_test_preds)
}



# Generate plotly objects
rb_plots <- map(rbs, ~ ggplotly(eff_function_qgam(.x, graph = TRUE)))

# Get visibility masks (which traces are visible per player)
# visibility_masks <- map(seq_along(rb_plots), function(i) {
#   rep(i == 1, length(rb_plots[[i]]$x$data))  # Show only 1st RB by default
# 
# })


# Track total number of traces
total_traces_per_rb <- map_int(rb_plots, ~ length(.x$x$data))

# Compute which indices in final_plot$x$data belong to the first RB
trace_indices_first_rb <- seq_len(total_traces_per_rb[1])

# Activate only traces that belong to the first RB
for (i in seq_along(final_plot$x$data)) {
  final_plot$x$data[[i]]$visible <- i %in% trace_indices_first_rb
}


# Combine all traces into one plot
all_traces <- unlist(map(rb_plots, ~ .x$x$data), recursive = FALSE)

# Build base plot and add all traces
final_plot <- plot_ly()
for (trace in all_traces) {
  trace$visible <- FALSE
  final_plot <- add_trace(final_plot,
                          x = trace$x, y = trace$y,
                          type = trace$type, mode = trace$mode,
                          line = trace$line, marker = trace$marker,
                          name = trace$name, visible = trace$visible,
                          showlegend = trace$showlegend)
}

# Activate first RB's traces
for (i in seq_along(visibility_masks[[1]])) {
  final_plot$x$data[[i]]$visible <- visibility_masks[[1]][i]
}

# Create dropdown buttons
buttons <- map2(seq_along(rbs), rbs, function(i, rb_name) {
  list(method = "restyle",
       args = list("visible", visibility_masks[[i]]),
       label = rb_name)
})

# Final layout
final_plot <- final_plot %>%
  layout(
    updatemenus = list(
      list(
        type = "dropdown",
        direction = "down",
        buttons = buttons,
        x = 0.1,
        y = 1.15
      )
    ),
    title = list(text = "Acceleration vs Speed by Player (99th QGAM)", x = 0.5),
    xaxis = list(title = "Speed (mph)"),
    yaxis = list(title = "Acceleration (m/s²)")
  )

final_plot


eff_function_normal("Saquon Barkley", graph = TRUE)
```

