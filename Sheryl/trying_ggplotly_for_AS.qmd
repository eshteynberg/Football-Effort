---
title: "trying_out_ggplotly"
format: html
---

```{r}
library(dplyr)
library(ggplot2)
library(plotly)
library(quantreg)
library(purrr)
library(tibble)
```



```{r}
#| label: non-linear-quant-regression
#| fig-cap: "Non-linear quantile regression for acceleration vs speed"


set.seed(1)

eff_function_rqss <- function(name, graph = FALSE) {
  player_runs <- tracking_bc |> 
    filter(displayName == name)

  N_FOLDS <- 5
  player_runs_modeling <- player_runs |> 
    select(s, a) |> 
    mutate(fold = sample(rep(1:N_FOLDS, length.out = n())))
  
  player_runs_cv <- function(x) {
    test_data <- player_runs_modeling |> 
      filter(fold == x)
    train_data <- player_runs_modeling |> 
      filter(fold != x)
    
    s_range <- range(train_data$s)
    test_data <- test_data |> 
      filter(s >= max(s_range[1], 1),
             s <= min(s_range[2], 9))
    
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = train_data)
    
    out <- tibble(
      rq_pred = predict(rq_fit, newdata = test_data),
      test_actual = test_data$a,
      res_rq = test_actual - rq_pred,
      test_fold = x
    )
    return(out)
  }

  player_runs_test_preds <- map(1:N_FOLDS, player_runs_cv) |> 
    list_rbind()
  
  eff_score <- mean(player_runs_test_preds$res_rq < 0)

  if (graph == TRUE) {
    # Fit final model and compute smooth prediction line
    rq_fit <- rqss(a ~ qss(s, lambda = 3), tau = 0.9, data = player_runs)
    s_seq <- seq(min(player_runs$s, na.rm = TRUE), max(player_runs$s, na.rm = TRUE), length.out = 100)
    pred_df <- tibble(s = s_seq)
    pred_df$a <- predict(rq_fit, newdata = pred_df)

    # Interactive ggplot
    p <- ggplot() +
      geom_point(data = player_runs, aes(
      x = s, 
      y = a,
      text = paste0("Speed: ", round(s, 2),
                    "<br>Acceleration: ", round(a, 2))), 
      alpha = 0.5, 
      color = "grey40") +
      geom_line(data = pred_df, aes(x = s, y = a), 
                color = "blue", size = 1.2) +
      scale_x_continuous(name = "Speed") +
      scale_y_continuous(name = "Acceleration") +
      labs(
        title = paste0(name, "'s Effort Quantile Curve (90%)"),
        caption = "Data from Weeks 1â€“9 of the 2022 NFL Season"
      ) +
      theme_minimal() +
      theme(
        plot.title = element_text(face = "bold", size = 18, hjust = 0.5),
        axis.title = element_text(face = "bold", size = 14),
        axis.text = element_text(size = 12),
        plot.caption = element_text(face = "italic", size = 9)
      )

    return(ggplotly(p, tooltip = "text"))
  }

  return(tibble(displayName = name, effort_ratio_90 = 1 - eff_score))
}



eff_function_rqss("Saquon Barkley", graph = TRUE)


```

















